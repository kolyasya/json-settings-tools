{"mappings":"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","sources":["src/index.ts","src/handler.ts","src/commands/index.ts","src/commands/sort/index.ts","src/helpers/log.ts","src/commands/methods/index.ts","src/commands/methods/read-file.ts","src/commands/methods/flat-object.ts","src/commands/methods/sort-object-by-keys.ts","src/commands/methods/deflat-object.ts","src/commands/methods/write-file.ts","src/commands/methods/parse-target.ts","src/commands/methods/except-object-keys.ts","src/commands/sort/method.ts","src/commands/check/index.ts","src/commands/check/method.ts","src/commands/help/index.ts"],"sourcesContent":["#!/usr/bin/env node\nimport Arg from 'arg';\nimport _ from 'lodash';\n\nimport { Result, CommandExecutor, sort, check } from './commands';\nimport log from './helpers/log';\nimport commandHandler from './handler';\n\nexport type Commands = 'check' | 'sort' | 'help';\nexport type FlagKeys = '--main' | '--target' | '--output' | '--except';\n\nconst rawArgs = Arg({\n  '--main': String,\n  '--target': String,\n  '--help': Boolean,\n  '--output': String,\n  '--except': String,\n  '--silent': Boolean,\n  '-e': '--except',\n  '-o': '--output',\n  '-m': '--main',\n  '-t': '--target'\n}, { argv: process.argv.slice(2) });\n\nexport type FlagsType = typeof rawArgs;\n\nexport type Flags = Pick<FlagsType, FlagKeys>;\n\nconst main = (async () => {\n  const args = rawArgs;\n\n  process.env.SILENT_MODE = args['--silent']! ? 'true' : 'false';\n\n  const executionResult = await commandHandler(args);\n\n  if (executionResult?.passed) {\n    process.exit(0)\n  } else {\n    process.exit(1)\n  }\n})()\n","import { check, sort, help, CommandExecutor, Result } from './commands';\nimport { Commands, FlagsType } from './index';\nimport log from './helpers/log';\nimport _ from 'lodash';\n\ntype CommandHanldersMap = { [key in Commands]?: CommandExecutor }\n\nconst handlers: CommandHanldersMap = {\n  sort: new CommandExecutor({\n    handler: sort,\n    name: 'sort',\n    condition: (args, flags) => {\n      if (!flags['--target']) {\n        return Result.error('Flag: --target is required for this command');\n      }\n\n      return Result.passed();\n    }\n  }),\n  check: new CommandExecutor({\n    handler: check,\n    name: 'check',\n    condition: (args, flags) => {\n      if (!flags['--target'] || !flags['--main']) {\n        return Result.error('Flags: --target and --main - are required for this command');\n      }\n\n      return Result.passed();\n    }\n  }),\n  help: new CommandExecutor({\n    handler: help,\n    name: 'help'\n  })\n}\n\nconst commandHandler = async (args: FlagsType): Promise<Result> => {\n  const [command] = args._ as Array<Commands>;\n\n  if (!command && !args['--help']) {\n    log.error`Command not found`;\n    return handlers.help!.run([command], args);\n  }\n\n  if (args['--help']) {\n    return handlers.help!.run([command], args);\n  }\n\n  const currentHandler = handlers[command];\n\n  if (!currentHandler) {\n    log.error`'${command}' is not a valid command. Check the README.MD`;\n\n    return Result.error(`'${command}' is not a valid command. Check the README.MD`);\n  }\n\n  log.ln();\n  log.info(_.capitalize(command));\n\n  return await currentHandler.run([command], args);\n}\n\nexport default commandHandler;\n","import { Flags } from '../index';\n\nimport sort from './sort';\nimport check from './check';\nimport help from './help';\nimport log from '../helpers/log';\n\nexport class Result {\n  passed: boolean;\n  message?: string;\n  data?: any;\n\n  static data(data: any): Result {\n    return {\n      passed: true,\n      data,\n    };\n  } \n\n  static passed(): Result {\n    return {\n      passed: true,\n    };\n  }\n\n  static error(message?: string): Result {\n    return {\n      passed: false,\n      message,\n    }\n  }\n}\n\nexport type CommandHandler = (args: string[], flags: Flags) => Promise<Result>;\nexport type CommandCondition = (args: string[], flags: Flags) => Result;\nexport type CommandRunner = (args: string[], flags: Flags) => void | never;\n\ninterface ICommandExecutor {\n  run: CommandRunner;\n}\n\ninterface CommandExecutorConfig {\n  handler: CommandHandler;\n  condition?: CommandCondition;\n  name: string\n}\n\nexport class CommandExecutor implements ICommandExecutor {\n  private readonly handler: CommandHandler;\n  private readonly condition?: CommandCondition;\n  private readonly name: string;\n\n  constructor(config: CommandExecutorConfig) {\n    this.handler = config.handler;\n    this.condition = config.condition;\n    this.name = config.name;\n  }\n\n  async run(args: string[], flags: Flags) {\n    const { passed, message = '' } = this.condition ? this.condition(args, flags) : { passed: true };\n    if (passed) {\n      return await this.handler(args, flags);\n    } else {\n      log.error(message || `Command '${this.name}' - failed`);\n      return Result.error(message);\n    }\n  }\n}\n\nexport {\n  sort,\n  check,\n  help\n};\n","import { Flags } from '../../index';\nimport log from '../../helpers/log';\nimport { CommandHandler, Result } from '../index';\nimport { readFile, writeFile } from '../methods';\nimport sortMethod from './method';\n\nconst sort: CommandHandler = async (args: string[], flags: Flags): Promise<Result> => {\n  log.success(`Sorting settings file - ${flags['--target']}`);\n    \n  const readFileResult = await readFile(flags['--target']!);\n  if (readFileResult.message) {\n    log.error`Failed to read file`;\n    log.error`Error: ${readFileResult.message}`;\n\n    return Result.error();\n  }\n  \n  const targetJsonResult = await sortMethod(readFileResult.data, flags);\n  if (targetJsonResult.message) {\n    log.error`Failed to sort settings`;\n    log.error`Error: ${targetJsonResult.message}`;\n\n    return Result.error();\n  }\n\n  const writeFileResult = await writeFile((flags['--output'] || flags['--target'])!, targetJsonResult.data)\n  if (writeFileResult.message) {\n    log.error`Failed to write file`;\n    log.error`Error: ${writeFileResult.message}`;\n\n    return Result.error();\n  } else {\n    log.success`It was saved to ${flags['--output'] || flags['--target']}`;\n\n    return Result.passed();\n  }\n}\n\nexport default sort;\n","import chalk from 'chalk';\n\ntype LogType = 'error' | 'warning' | 'info' | 'success' | 'clean';\n\ntype LogTypeStyles = {\n  [key in LogType]: typeof chalk.Color;\n}\n\nconst LogTypeStylesMap: LogTypeStyles = {\n  error: 'redBright',\n  warning: 'yellow',\n  info: 'blue',\n  success: 'green',\n  clean: 'white'\n}\n\ntype LogText = any;\n\nclass LoggerRaw {\n  static parseText = (...text: LogText) => {\n    if (typeof text[0] === 'string') {\n      return text[0];\n    } else {\n      const templateString = text\n      const start = [text[0][0]];\n      const templateMembers = templateString.slice(1).map((value: string, index: number) => value + text[0][index + 1]);\n      const resultMembers = [...start, ...templateMembers];\n\n      return resultMembers.join('');\n    }\n  };\n\n  static makeTextStyle = (type: LogType, ...text: LogText): string => {\n    const parsedText = LoggerRaw.parseText(...text);\n\n    return chalk[LogTypeStylesMap[type]](parsedText)\n  }\n\n  public error = (...message: LogText) => LoggerRaw.makeTextStyle('error', ...message);\n  public warning = (...message: LogText) => LoggerRaw.makeTextStyle('warning', ...message);\n  public info = (...message: LogText) => LoggerRaw.makeTextStyle('info', ...message);\n  public success = (...message: LogText) => LoggerRaw.makeTextStyle('success', ...message);\n  public clean = (...message: LogText) => LoggerRaw.makeTextStyle('clean', ...message);\n}\n\nclass Logger {\n  raw: LoggerRaw;\n\n  constructor() {\n    this.raw = new LoggerRaw();\n  }\n\n  static log = (...text: LogText) => {\n    console.log(...text);\n  }\n\n  static makeLogText = (type: LogType, ...text: LogText) => {\n    if (process.env.SILENT_MODE === 'true') {\n      return;\n    }\n\n    Logger.log(LoggerRaw.makeTextStyle(type, ...text));\n    Logger.log('');\n  }\n\n  public error = (...message: LogText) => Logger.makeLogText('error', ...message);\n  public warning = (...message: LogText) => Logger.makeLogText('warning', ...message);\n  public info = (...message: LogText) => Logger.makeLogText('info', ...message);\n  public success = (...message: LogText) => Logger.makeLogText('success',...message);\n  public clean = (...message: LogText) => Logger.makeLogText('clean', ...message);\n  public ln = () => '\\n';\n}\n\nconst log = new Logger();\n\nexport default log;\n","import readFile from './read-file';\nimport flatObject from './flat-object';\nimport sortObjectByKeys from './sort-object-by-keys';\nimport deflatObject from './deflat-object';\nimport writeFile from './write-file';\nimport parseJson from './parse-target';\nimport exceptObjectKeys from './except-object-keys';\n\nexport {\n  parseJson,\n  readFile,\n  writeFile,\n  flatObject,\n  sortObjectByKeys,\n  deflatObject,\n  exceptObjectKeys,\n};\n","import fs from 'fs';\nimport util from 'util';\nimport path from 'path';\n\nimport { Result } from '../index';\n\nconst readFilePromise = util.promisify(fs.readFile);\n\nconst readFile = async (targetFilePath: string): Promise<Result> => {\n  const targetNaturalPath = path.resolve(process.cwd(), targetFilePath);\n  try {\n    const targetFile = await readFilePromise(targetNaturalPath, { encoding: 'utf-8' });\n\n    return Result.data(targetFile);\n  } catch (err) {\n    return Result.error(err.message);\n  }\n}\n\nexport default readFile;","import _ from 'lodash';\n\nconst flatObject = (object: any, baseKey: string = ''): any => {\n  return Object.keys(object).reduce((r, key) => {\n    if (_.isObject(object[key]) && Object.keys(object[key]).length > 0) {\n      return {\n        ...r,\n        ...flatObject(object[key], `${baseKey}${key}.`),\n      };\n    }\n\n    return {\n      ...r,\n      [`${baseKey}${key}`]: object[key],\n    };\n  }, {});\n};\n\nexport default flatObject;\n","const sortObjectByKeys = <T>(object: T, exceptKeys: Array<string> | null): T => {\n  const objectKeys = Object.keys(object);\n  let exceptedKeys: Array<string> = [];\n  if (exceptKeys) {\n    exceptedKeys = objectKeys.filter(key => exceptKeys.some(except => new RegExp(`^${except}.*`, 'gim').test(key)));\n  }\n\n  const sortedKeys = objectKeys.sort(\n    (a: any, b: any) => a.toLowerCase() < b.toLowerCase()\n      ? -1\n      : a.toLowerCase() > b.toLowerCase()\n        ? 1\n        : 0\n  ).filter(key => !exceptedKeys.includes(key));\n  \n  return exceptedKeys.concat(sortedKeys).reduce((acc, key) => ({ ...acc, [key]: object[key as keyof T] }), {}) as T\n}\n\nexport default sortObjectByKeys;","import _ from 'lodash';\n\nconst deflatObject = (object: any) => {\n  const resultObject = {};\n\n  Object.keys(object).map(key => {\n    _.set(resultObject, key, object[key]);\n  })\n\n  return resultObject;\n}\n\nexport default deflatObject;\n","import fs from 'fs';\nimport util from 'util';\nimport path from 'path';\n\nimport { Result } from '../index';\n\nconst writeFilePromise = util.promisify(fs.writeFile);\n\nconst writeFile = async (targetFilePath: string, data: any): Promise<Result> => {\n  const targetNaturalPath = path.resolve(process.cwd(), targetFilePath);\n\n  try {\n    await writeFilePromise(targetNaturalPath, data, { encoding: 'utf-8' });\n\n    return Result.passed()\n  } catch (err) {\n    return Result.error(err.message)\n  }\n}\n\nexport default writeFile;","import { Result } from '../index';\n\nconst parseJson = (jsonString: string): Result => {\n  try {\n    const parsedJson = JSON.parse(jsonString);\n    return Result.data(parsedJson);\n  } catch (err) {\n    return Result.error(err.message);\n  }\n}\n\nexport default parseJson;","const exceptObjectKeys = <T>(object: T, keys: Array<string>): T => {\n  const resultObject: any = {};\n  const restKeys = Object.keys(object).filter((key: string) => !keys.includes(key));\n  const resultKeysOrder = keys.concat(restKeys);\n\n  resultKeysOrder.map((key: string) => {\n    resultObject[key] = object[key as keyof T];\n  });\n\n  return resultObject;\n};\n\nexport default exceptObjectKeys;","import { deflatObject, flatObject, parseJson, sortObjectByKeys, exceptObjectKeys } from '../methods';\n\nimport { Flags } from '../../index';\nimport log from '../../helpers/log';\n\nimport { Result } from '../index';\n\nconst sortMethod = async (target: any, flags: Flags): Promise<Result>  => {\n  const exceptKeys = flags['--except'] ? flags['--except'].replace(/\\s/gim, '').split(',') : null;\n\n  const parseResult = parseJson(target);\n  if (!parseResult.passed) {\n    log.error`Failed to parse json. Check syntax`;\n    log.error`Error: ${parseResult.message!}`;\n\n    return Result.error();\n  }\n\n  const flattenedTarget = flatObject(parseResult.data);\n  const sortedTarget = sortObjectByKeys(flattenedTarget, exceptKeys);\n  \n  const deflattenedTarget = deflatObject(sortedTarget);\n\n  const resultTarget = deflattenedTarget;\n\n  const targetJson = JSON.stringify(resultTarget, null, 2);\n\n  log.success`${flags['--target']} was successfully sorted and prettified`;\n  \n  return Result.data(targetJson);\n}\n\nexport default sortMethod;\n","import { CommandHandler, Result } from '../index';\nimport { Flags } from '../../index';\nimport log from '../../helpers/log';\nimport { readFile } from '../methods';\nimport checkMethod from './method';\n\nconst check: CommandHandler = async (args: string[], flags: Flags): Promise<Result> => {\n  log.success`Checking settings file - ${flags['--target']} by main file - ${flags['--main']}`;\n  \n  const readMainResult = await readFile(flags['--main']!);\n  if (readMainResult.message) {\n    log.error`Failed to read file`;\n    log.error`Error: ${readMainResult.message}`;\n    return Result.error()\n  }\n  \n  const readTargetResult = await readFile(flags['--target']!);\n  if (readTargetResult.message) {\n    log.error`Failed to read file`;\n    log.error`Error: ${readTargetResult.message}`;\n    return Result.error()\n  }\n\n  const main = readMainResult.data;\n  const target = readTargetResult.data;\n\n  return checkMethod({ target, main }, flags);\n}\n\nexport default check;\n","import chalk from 'chalk';\n\nimport { Result } from '..';\nimport log from '../../helpers/log';\nimport { Flags } from '../../index';\nimport { flatObject, parseJson } from '../methods';\n\nconst checkMethod = ({ main, target }: { main: any, target: any }, flags: Flags): Result => {\n  const parseMainResult = parseJson(main);\n  if (parseMainResult.message) {\n    log.error`Failed to parse main json. Check syntax`;\n    log.error`Error: ${parseMainResult.message!}`;\n  \n    return Result.error();\n  }\n  \n  const parseTargetResult = parseJson(target);\n  if (parseTargetResult.message) {\n    log.error`Failed to parse target json. Check syntax`;\n    log.error`Error: ${parseTargetResult.message!}`;\n\n    return Result.error();\n  }\n\n  const flattenedMain = flatObject(parseMainResult.data);\n  const flattenedTarget = flatObject(parseTargetResult.data);\n  const mainKeys = Object.keys(flattenedMain);\n\n  const missingKeys = mainKeys.filter(key => {\n    const targetValue = flattenedTarget[key];\n    return targetValue === undefined;\n  });\n\n  if (!missingKeys.length) {\n    log.success`Target settings are valid and ready to use`;\n\n    return Result.passed();\n  }\n\n  log.error`Target settings are invalid`;\n  log.error`Missing keys:\n${missingKeys.map(key => chalk.red(`${key}`)).join('\\n')}\n`;\n\n  return Result.error();\n}\n\nexport default checkMethod;\n","import { CommandHandler, Result } from '../index';\nimport log from '../../helpers/log';\n\n\nconst help: CommandHandler = async (args, flags): Promise<Result> => {\n  log.warning`Commands`;\n  log.clean`${log.raw.success`sort`} - sorts settings keys alphabetically. Also, you can provide keys, which should be at the start of the object and in the provided order.`;\n  log.clean`${log.raw.success`check`} - compares and checks two files of settings, main and provided. If the provided file missing some fields - the process will be broke and you will see which fields are missing.`;\n  log.warning`Flags for commands`;\n  log.clean`${log.raw.success`--main/-m <path_to_main_settings.json>`} (check) - path to main settings file to compare with --target/-t file.`;\n  log.clean`${log.raw.success`--target/-t <path_to_target_settings.json>`} (sort, check) - path to settings file to check and validate.`\n  log.clean`${log.raw.success`--output/-o <path>`} (sort) - path to save --target/-t after sorting.`;\n  log.clean`${log.raw.success`--silent/-s`} (sort/check) - option to disable all output to the console. The process just will be exited if the settings are not valid.`;\n  log.clean`${log.raw.success`--except/-e \"key1, key2, key3\"`} (sort) - keys which should be excepted sorting, will be in provided order and placed to the start of sorted settings.`;\n\n\n  return Result.passed();\n}\n\nexport default help;\n"],"names":[],"version":3,"file":"index.js.map","sourceRoot":"../"}